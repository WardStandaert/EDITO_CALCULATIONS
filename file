lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
elevation_x <- as.numeric(row["elevation_x"])
elevation_y <- as.numeric(row["elevation_y"])
# Calculate distance
distm(c(lon, lat), c(elevation_x, elevation_y), fun = distHaversine)
})
enhanced_DF$Substrate_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
Substrate_x <- as.numeric(row["Substrate_x"])
Substrate_y <- as.numeric(row["Substrate_y"])
# Calculate distance
distm(c(lon, lat), c(Substrate_x, Substrate_y), fun = distHaversine)
})
enhanced_DF$Energy_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
Energy_x <- as.numeric(row["Energy_x"])
Energy_y <- as.numeric(row["Energy_y"])
# Calculate distance
distm(c(lon, lat), c(Energy_x, Energy_y), fun = distHaversine)
})
glimpse(enhanced_DF)
enhanced_DF = enhanceDF(inputPoints = pts2,
requestedParameters = parameters,
requestedTimeSteps = timeSteps,
stacCatalogue = EDITOSTAC,
verbose="on")
View(pts)
enhanced_DF = enhanceDF(inputPoints = pts,
requestedParameters = parameters,
requestedTimeSteps = timeSteps,
stacCatalogue = EDITOSTAC,
verbose="on")
glimpse(enhanced_DF)
enhanced_DF <- left_join(enhanced_DF, pts, by = c("Longitude","Latitude"))
enhanced_DF = enhanceDF(inputPoints = pts,
requestedParameters = parameters,
requestedTimeSteps = timeSteps,
stacCatalogue = EDITOSTAC,
verbose="on")
enhanced_DF$Time - enhanced_DF$thetao_t
enhanced_DF$Time - enhanced_DF$so_t
enhanced_DF$Time - enhanced_DF$zooc_t
enhanced_DF$Time - enhanced_DF$phyc_t
# Check difference in space  ----
library(geosphere)
enhanced_DF$thetao_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
thetao_x <- as.numeric(row["thetao_x"])
thetao_y <- as.numeric(row["thetao_y"])
# Calculate distance
distm(c(lon, lat), c(thetao_x, thetao_y), fun = distHaversine)
})
enhanced_DF$so_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
so_x <- as.numeric(row["so_x"])
so_y <- as.numeric(row["so_y"])
# Calculate distance
distm(c(lon, lat), c(so_x, so_y), fun = distHaversine)
})
enhanced_DF$zooc_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
zooc_x <- as.numeric(row["zooc_x"])
zooc_y <- as.numeric(row["zooc_y"])
# Calculate distance
distm(c(lon, lat), c(zooc_x, zooc_y), fun = distHaversine)
})
enhanced_DF$phyc_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
phyc_x <- as.numeric(row["phyc_x"])
phyc_y <- as.numeric(row["phyc_y"])
# Calculate distance
distm(c(lon, lat), c(phyc_x, phyc_y), fun = distHaversine)
})
enhanced_DF$elevation_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
elevation_x <- as.numeric(row["elevation_x"])
elevation_y <- as.numeric(row["elevation_y"])
# Calculate distance
distm(c(lon, lat), c(elevation_x, elevation_y), fun = distHaversine)
})
enhanced_DF$Substrate_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
Substrate_x <- as.numeric(row["Substrate_x"])
Substrate_y <- as.numeric(row["Substrate_y"])
# Calculate distance
distm(c(lon, lat), c(Substrate_x, Substrate_y), fun = distHaversine)
})
enhanced_DF$Energy_dist <- apply(enhanced_DF, 1, function(row) {
# Convert elements to numeric
lon <- as.numeric(row["lon"])
lat <- as.numeric(row["lat"])
Energy_x <- as.numeric(row["Energy_x"])
Energy_y <- as.numeric(row["Energy_y"])
# Calculate distance
distm(c(lon, lat), c(Energy_x, Energy_y), fun = distHaversine)
})
glimpse(enhanced_DF)
par(mfrow = c(3,3))
hist(enhanced_DF$thetao_dist)
par(mfrow = c(3,3))
hist(enhanced_DF$thetao_dist)
par(mfrow = c(3,3))
hist(enhanced_DF$thetao_dist)
par(mfrow = c(3,3))
hist(enhanced_DF$thetao_dist)
hist(enhanced_DF$so_dist)
hist(enhanced_DF$phyc_dist)
hist(enhanced_DF$zooc_dist)
hist(enhanced_DF$elevation_dist)
hist(enhanced_DF$Substrate_dist)
hist(enhanced_DF$Energy_dist)
# Compare with original extraction  ----
## Numerical variables ----
par(mfrow = c(3,2))
plot(enhanced_DF$SST, enhanced_DF$thetao, cex.lab=1.3,
xlim = c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao)),
ylim = c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao)))
plot(enhanced_DF$SSS, enhanced_DF$so, cex.lab=1.3,
xlim = c(min(enhanced_DF$SSS, enhanced_DF$so), max(enhanced_DF$SSS, enhanced_DF$so)),
ylim = c(min(enhanced_DF$SSS, enhanced_DF$so), max(enhanced_DF$SSS, enhanced_DF$so)))
plot(enhanced_DF$Phyto, enhanced_DF$phyc, cex.lab=1.3,
xlim = c(min(enhanced_DF$Phyto, enhanced_DF$phyc), max(enhanced_DF$Phyto, enhanced_DF$phyc)),
ylim = c(min(enhanced_DF$Phyto, enhanced_DF$phyc), max(enhanced_DF$Phyto, enhanced_DF$phyc)))
plot(enhanced_DF$ZooPl, enhanced_DF$zooc, cex.lab=1.3,
xlim = c(min(enhanced_DF$ZooPl, enhanced_DF$zooc), max(enhanced_DF$ZooPl, enhanced_DF$zooc)),
ylim = c(min(enhanced_DF$ZooPl, enhanced_DF$zooc), max(enhanced_DF$ZooPl, enhanced_DF$zooc)))
plot(enhanced_DF$depth, enhanced_DF$elevation, cex.lab=1.3,
xlim = c(min(enhanced_DF$depth, enhanced_DF$elevation), max(enhanced_DF$depth, enhanced_DF$elevation)),
ylim = c(min(enhanced_DF$depth, enhanced_DF$elevation), max(enhanced_DF$depth, enhanced_DF$elevation)))
## Categorical variables ----
substr_lvl <- tibble(sub_char = c("Fine mud", "Sand", "Muddy sand", "Mixed sediment",
"Coarse substrate","Sandy mud or Muddy sand", "Seabed",
"Rock or other hard substrata","Sandy mud", "Sandy mud or Muddy sand ",
"Sediment","Fine mud or Sandy mud or Muddy sand"),
seabed_substrate = c(1:12))
energy_lvl <- tibble(ene_char = c("High energy", "Moderate energy", "Low energy", "No energy information"),
seabed_energy = c(1:4))
enhanced_DF2 <- enhanced_DF2 %>%
left_join(substr_lvl, by = c("seabed_substrate")) %>%
left_join(energy_lvl, by = c("seabed_energy"))
## Categorical variables ----
substr_lvl <- tibble(sub_char = c("Fine mud", "Sand", "Muddy sand", "Mixed sediment",
"Coarse substrate","Sandy mud or Muddy sand", "Seabed",
"Rock or other hard substrata","Sandy mud", "Sandy mud or Muddy sand ",
"Sediment","Fine mud or Sandy mud or Muddy sand"),
seabed_substrate = c(1:12))
energy_lvl <- tibble(ene_char = c("High energy", "Moderate energy", "Low energy", "No energy information"),
seabed_energy = c(1:4))
enhanced_DF2 <- enhanced_DF2 %>%
left_join(substr_lvl, by = c("seabed_substrate")) %>%
left_join(energy_lvl, by = c("seabed_energy"))
enhanced_DF <- enhanced_DF %>%
left_join(substr_lvl, by = c("seabed_substrate")) %>%
left_join(energy_lvl, by = c("seabed_energy"))
glimpse(enhanced_DF)
sum(enhanced_DF$Energy_Description == enhanced_DF$ene_char) / length(enhanced_DF$Energy_Description)
sum(enhanced_DF$Substrate_Description == enhanced_DF$sub_char) / length(enhanced_DF$Substrate_Description)
par(mfrow = c(1,2))
plot(enhanced_DF$Energy, enhanced_DF$seabed_energy)
plot(enhanced_DF$Substrate, enhanced_DF$seabed_substrate)
enhanced_DF %>%
group_by(Substrate_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(sub_char) %>%
count(), by = c("Substrate_Description" = "sub_char")) %>%
mutate(old_extraction = n.y,
EDITO_extraction = n.x) %>%
select(-n.x, -n.y)
Substrate_Description
enhanced_DF$Substrate_Description
enhanced_DF %>%
group_by(Substrate_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(sub_char) %>%
count(), by = c("Substrate_Description" = "sub_char")) %>%
mutate(old_extraction = n.y,
EDITO_extraction = n.x) %>%
select(-n.x, -n.y)
enhanced_DF %>%
group_by(Energy_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char) %>%
count(), by = c("Energy_Description" = "ene_char")) %>%
mutate(old_extraction = n.y,
EDITO_extraction = n.x) %>%
select(-n.x, -n.y)
energy_lvl <- tibble(ene_char = c("None","High","Low","Moderate","no info"),
seabed_energy = c(1:5))
energy_lvl2 <- tibble(ene_char = c("None","High","Low","Moderate","no info"),
seabed_energy = c(1:5))
energy_lvl2 <- tibble(ene_char = c("None","High","Low","Moderate","no info"),
seabed_energy = c(1:5))
enhanced_DF <- enhanced_DF %>%
left_join(substr_lvl, by = c("seabed_substrate")) %>%
left_join(energy_lvl, by = c("seabed_energy")) %>%
left_join(energy_lvl2, by = c("seabed_energy"))
enhanced_DF %>%
group_by(Energy_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char) %>%
count(), by = c("Energy_Description" = "ene_char")) %>%
mutate(old_extraction = n.y,
EDITO_extraction = n.x) %>%
select(-n.x, -n.y)
glimpse(enhanced_DF)
enhanced_DF %>%
group_by(Energy_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char) %>%
count(), by = c("Energy_Description" = "ene_char")) %>%
mutate(old_extraction = n.y,
EDITO_extraction = n.x) %>%
select(-n.x, -n.y)
enhanced_DF %>%
group_by(Energy_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char) %>%
count(), by = c("Energy_Description" = "ene_char"))
ene_char
energy_lvl2 <- tibble(ene_char = c("None","High energy","Low energy","Moderate energy","No energy information"),
seabed_energy = c(1:5))
enhanced_DF <- enhanced_DF %>%
left_join(substr_lvl, by = c("seabed_substrate")) %>%
left_join(energy_lvl, by = c("seabed_energy")) %>%
left_join(energy_lvl2, by = c("seabed_energy"))
glimpse(enhanced_DF)
enhanced_DF %>%
group_by(Energy_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char) %>%
count(), by = c("Energy_Description" = "ene_char"))
glimpse(enhanced_DF)
energy_lvl <- tibble(ene_char_old = c("High energy", "Moderate energy", "Low energy", "No energy information"),
seabed_energy = c(1:4))
energy_lvl2 <- tibble(ene_char_edito = c("None","High energy","Low energy","Moderate energy","No energy information"),
seabed_energy = c(1:5))
enhanced_DF <- enhanced_DF %>%
left_join(substr_lvl, by = c("seabed_substrate")) %>%
left_join(energy_lvl, by = c("seabed_energy")) %>%
left_join(energy_lvl2, by = c("seabed_energy"))
glimpse(enhanced_DF)
enhanced_DF %>%
group_by(Energy_Description) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char_edito) %>%
count(), by = c("ene_char_old" = "ene_char_edito"))
enhanced_DF %>%
group_by(ene_char_edito) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char_edito) %>%
count(), by = c("ene_char_old" = "ene_char_edito"))
enhanced_DF %>%
group_by(ene_char_old) %>%
count() %>%
full_join(enhanced_DF %>%
group_by(ene_char_edito) %>%
count(), by = c("ene_char_old" = "ene_char_edito"))
enhanced_DF %>%
group_by(ene_char_old)
enhanced_DF %>%
group_by(ene_char_old) %>%
count()
enhanced_DF %>%
group_by(ene_char_edito) %>%
count()
parameters = list("elevation" = c("par" = "elevation",
"fun" = "mean",
"buffer" = "10000"),
"thetao"= c("par" = "thetao",
"fun" = "mean",
"buffer" = "10000"),
"so"= c("par" = "so",
"fun" = "mean",
"buffer" = "10000"),
"zooc"= c("par" = "zooc",
"fun" = "mean",
"buffer" = "10000")
, "phyc"= c("par" = "phyc",
"fun" = "mean",
"buffer" = "10000")
, "Energy"= c("par" = "Energy",
"fun" = "mean",
"buffer" = "10000"))
#check if they all exist
for ( parameter in parameters) {
param = ifelse(length(parameter) == 1, parameter, parameter["par"])
if(! param %in% unique(EDITOSTAC$par) )
{ dbl("Unknown parameter ", param)
}
}
# Extract data ----
#add verbose= anything to get additional info on the positions ( par_x, par_y, par_z ) and time (par_t) found in the zarr files
pts2 <- pts %>% arrange(desc(Latitude))
enhanced_DF = enhanceDF(inputPoints = pts,
requestedParameters = parameters,
requestedTimeSteps = timeSteps,
stacCatalogue = EDITOSTAC,
verbose="on")
glimpse(enhanced_DF)
par(mfrow = c(3,3))
hist(enhanced_DF$thetao_dist)
par(mfrow = c(3,2))
plot(enhanced_DF$SST, enhanced_DF$thetao, cex.lab=1.3,
xlim = c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao)),
ylim = c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao)))
enhanced_DF
glimpse
glimpse(enhanced_DF)
enhanced_DF$thetao
enhanced_DF$SST
plot(enhanced_DF$SST, enhanced_DF$thetao, cex.lab=1.3,
xlim = c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao)),
ylim = c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao)))
c(min(enhanced_DF$SST, enhanced_DF$thetao), max(enhanced_DF$SST, enhanced_DF$thetao))
plot(enhanced_DF$SST, enhanced_DF$thetao, cex.lab=1.3,
xlim = c(min(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T), max(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T)),
ylim = c(min(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T), max(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T)))
# Compare with original extraction  ----
## Numerical variables ----
par(mfrow = c(3,2))
plot(enhanced_DF$SST, enhanced_DF$thetao, cex.lab=1.3,
xlim = c(min(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T), max(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T)),
ylim = c(min(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T), max(enhanced_DF$SST, enhanced_DF$thetao, na.rm = T)))
plot(enhanced_DF$SSS, enhanced_DF$so, cex.lab=1.3,
xlim = c(min(enhanced_DF$SSS, enhanced_DF$so, na.rm = T), max(enhanced_DF$SSS, enhanced_DF$so, na.rm = T)),
ylim = c(min(enhanced_DF$SSS, enhanced_DF$so, na.rm = T), max(enhanced_DF$SSS, enhanced_DF$so, na.rm = T)))
plot(enhanced_DF$Phyto, enhanced_DF$phyc, cex.lab=1.3,
xlim = c(min(enhanced_DF$Phyto, enhanced_DF$phyc, na.rm = T), max(enhanced_DF$Phyto, enhanced_DF$phyc, na.rm = T)),
ylim = c(min(enhanced_DF$Phyto, enhanced_DF$phyc, na.rm = T), max(enhanced_DF$Phyto, enhanced_DF$phyc, na.rm = T)))
plot(enhanced_DF$ZooPl, enhanced_DF$zooc, cex.lab=1.3,
xlim = c(min(enhanced_DF$ZooPl, enhanced_DF$zooc, na.rm = T), max(enhanced_DF$ZooPl, enhanced_DF$zooc, na.rm = T)),
ylim = c(min(enhanced_DF$ZooPl, enhanced_DF$zooc, na.rm = T), max(enhanced_DF$ZooPl, enhanced_DF$zooc, na.rm = T)))
plot(enhanced_DF$depth, enhanced_DF$elevation, cex.lab=1.3,
xlim = c(min(enhanced_DF$depth, enhanced_DF$elevation, na.rm = T), max(enhanced_DF$depth, enhanced_DF$elevation, na.rm = T)),
ylim = c(min(enhanced_DF$depth, enhanced_DF$elevation, na.rm = T), max(enhanced_DF$depth, enhanced_DF$elevation, na.rm = T)))
pckgs <- c("raster","sp","proj4","ncdf4","car","mgcv","dismo","rJava","ENMeval",
"boot","gstat","mgcv", "ggplot2", "tidyr", "dynamicSDM", "stringr",
"mapdata", "base","tidync", "sf", "mapview", "tictoc", "ape", "spdep",
"spThin", "StatMatch", "CoordinateCleaner", "maxnet", "rasterVis",
"tibble", "purrr", "tidyverse")
pckgs[which(lapply(pckgs, require, character.only = TRUE) == FALSE)]
rm(pckgs)
setwd("/home/onyxia/work/EDITO_CALCULATIONS/")
#1. Read & organize data -----
# load functions, but also cached stac catalog named stacCatalog
source("zarr_extraction/editoTools.R")
options("outputdebug"=c('L','M'))
#the cached stacCatalog is called 'EDITOSTAC'
load(file = "zarr_extraction/editostacv2.par")
library(arrow)
# the file to process
acf <- S3FileSystem$create(
anonymous = T,
scheme = "https",
endpoint_override = "s3.waw3-1.cloudferro.com"
)
eurobis <- arrow::open_dataset(acf$path("emodnet/biology/eurobis_occurence_data/eurobisgeoparquet/eurobis_no_partition_sorted.parquet" ))
df_herring <- eurobis |>
filter(aphiaidaccepted==126417, datasetid==4423,
longitude > -12, longitude < 10,
latitude > 48, latitude < 62,
observationdate >= as.POSIXct("2000-01-01"),
observationdate <= as.POSIXct("2020-12-31")) |>
collect()
glimpse(df_herring)
df_herring <- df_herring %>%
select(Latitude=latitude,
Longitude=longitude,
Time=observationdate) %>%
mutate(year = year(Time),
month = month(Time))
mapview(df_herring %>% dplyr::select(Longitude) %>% pull,
df_herring %>% dplyr::select(Latitude) %>% pull,
crs = "epsg:4326")
table(df_herring$month)
# remove outliers
# df_herring2 <- CoordinateCleaner::cc_outl(x = as.data.frame(df_herring), lon = "lon", lat = "lat",
#                                        method = "quantile", mltpl = 1.5, verbose = TRUE)
#Removed 0 records.
#2. Remove duplicates ----
nrow(df_herring)
df_herring <- df_herring %>%
distinct(year, month, Longitude, Latitude, .keep_all = TRUE)
nrow(df_herring)
#3. create pseudo-absences ----
abs <- spatiotemp_pseudoabs(spatial.method = "buffer", temporal.method = "random",
occ.data = df_herring %>% mutate(x = Longitude, y = Latitude),
temporal.ext = c("2010-01-01", "2020-12-31"),
spatial.buffer = 10000, n.pseudoabs = 1000)
df_p <- df_herring %>%
select(Longitude, Latitude, year, month, Time) %>%
mutate(pa = 1)
df_a <- abs %>% rename(Longitude = x, Latitude = y) %>%
mutate(Time = as.POSIXct(paste(year,month,day, sep = "-")),
pa = 0) %>%
select(-day)
#4. Sample environmental variables with biological data ----
source("zarr_extraction/editoTools.R")
options("outputdebug"=c('L','M'))
#the requested timestep resolution of the dataset in milliseconds
#in this case we work with monthly data (1 month = 30.436875*24*3600*1000 = 2629746000 milliseconds)
timeSteps=c(2629746000)
abs
getwd()
save(abs, "/zarr_extraction/absences_save.Rdata")
save(abs, path = "/zarr_extraction/absences_save.Rdata")
save(abs, path = "zarr_extraction/absences_save.Rdata")
?save
save(abs, file = "zarr_extraction/absences_save.Rdata")
load("zarr_extraction/absences_save.Rdata")
df_p <- df_herring %>%
select(Longitude, Latitude, year, month, Time) %>%
mutate(pa = 1)
df_a <- abs %>% rename(Longitude = x, Latitude = y) %>%
mutate(Time = as.POSIXct(paste(year,month,day, sep = "-")),
pa = 0) %>%
select(-day)
#4. Sample environmental variables with biological data ----
source("zarr_extraction/editoTools.R")
options("outputdebug"=c('L','M'))
#the requested timestep resolution of the dataset in milliseconds
#in this case we work with monthly data (1 month = 30.436875*24*3600*1000 = 2629746000 milliseconds)
timeSteps=c(2629746000)
parameters_pres = list("elevation" = "elevation",
"thetao"= c("par" = "thetao",
"fun" = "mean",
"buffer" = "18520"),
"so"= c("par" = "so",
"fun" = "mean",
"buffer" = "18520"),
"zooc" = c("par" = "zooc",
"fun" = "mean",
"buffer" = "18520"),
"phyc" = c("par" = "phyc",
"fun" = "mean",
"buffer" = "18520"),
"Substrate"= c("par" = "Substrate",
"fun" = "mean",
"buffer" = "18520"),
"Energy"= c("par" = "Energy",
"fun" = "mean",
"buffer" = "18520"))
parameters_abs = list("elevation" = c("par" = "elevation",
"fun" = "mean",
"buffer" = "18520"),
"thetao"= c("par" = "thetao",
"fun" = "mean",
"buffer" = "18520"),
"so"= c("par" = "so",
"fun" = "mean",
"buffer" = "18520"),
"zooc" = c("par" = "zooc",
"fun" = "mean",
"buffer" = "18520"),
"phyc" = c("par" = "phyc",
"fun" = "mean",
"buffer" = "18520"),
"Substrate"= c("par" = "Substrate",
"fun" = "mean",
"buffer" = "18520"),
"Energy"= c("par" = "Energy",
"fun" = "mean",
"buffer" = "18520"))
#check if they all exist
for ( parameter in parameters_pres) {
param = ifelse(length(parameter) == 1, parameter, parameter["par"])
if(! param %in% unique(EDITOSTAC$par) )
{ dbl("Unknown parameter ", param)
}
}
enhanced_DF_pres = enhanceDF(inputPoints = df_p,
requestedParameters = parameters_pres,
requestedTimeSteps = timeSteps,
stacCatalogue = EDITOSTAC,
verbose="on")
glimpse(enhanced_DF_pres)
table(enhanced_DF_pres$Energy)
table(enhanced_DF_pres$Energy_Description)
table(enhanced_DF_pres$Substrate_Description)
enhanced_DF_abs = enhanceDF(inputPoints = df_a,
requestedParameters = parameters_abs,
requestedTimeSteps = timeSteps,
stacCatalogue = EDITOSTAC,
verbose="on")
history(Inf)
savehistory('file')
